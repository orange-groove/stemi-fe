// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-axios';
import type { CreatePlaylistData, CreatePlaylistError, CreatePlaylistResponse, GetAllPlaylistsError, GetAllPlaylistsResponse, GetPlaylistData, GetPlaylistError, GetPlaylistResponse, UpdatePlaylistData, UpdatePlaylistError, UpdatePlaylistResponse, DeletePlaylistData, DeletePlaylistError, DeletePlaylistResponse, GetPlaylistSongsData, GetPlaylistSongsError, GetPlaylistSongsResponse, CreateSongData, CreateSongError, CreateSongResponse, GetAllSongsData, GetAllSongsError, GetAllSongsResponse, GetSongData, GetSongError, GetSongResponse, UpdateSongData, UpdateSongError, UpdateSongResponse, DeleteSongData, DeleteSongError, DeleteSongResponse, DownloadStemsData, DownloadStemsError, DownloadStemsResponse, DownloadMixdownData, DownloadMixdownError, DownloadMixdownResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Create a playlist
 * Create a new playlist for a specific user using form data.
 */
export const createPlaylist = <ThrowOnError extends boolean = false>(options: Options<CreatePlaylistData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePlaylistResponse, CreatePlaylistError, ThrowOnError>({
        ...options,
        url: '/playlist'
    });
};

/**
 * Get all playlists for a user
 * Retrieve all playlists for a specific user.
 */
export const getAllPlaylists = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllPlaylistsResponse, GetAllPlaylistsError, ThrowOnError>({
        ...options,
        url: '/playlist'
    });
};

/**
 * Get a playlist
 * Get a playlist by ID.
 */
export const getPlaylist = <ThrowOnError extends boolean = false>(options: Options<GetPlaylistData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPlaylistResponse, GetPlaylistError, ThrowOnError>({
        ...options,
        url: '/playlist/{playlist_id}'
    });
};

/**
 * Update a playlist
 * Update the name of a playlist.
 */
export const updatePlaylist = <ThrowOnError extends boolean = false>(options: Options<UpdatePlaylistData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdatePlaylistResponse, UpdatePlaylistError, ThrowOnError>({
        ...options,
        url: '/playlist/{playlist_id}'
    });
};

/**
 * Delete a playlist
 * Delete a playlist by ID.
 */
export const deletePlaylist = <ThrowOnError extends boolean = false>(options: Options<DeletePlaylistData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePlaylistResponse, DeletePlaylistError, ThrowOnError>({
        ...options,
        url: '/playlist/{playlist_id}'
    });
};

/**
 * Get all songs for a playlist
 * Get all songs for a specific playlist.
 */
export const getPlaylistSongs = <ThrowOnError extends boolean = false>(options: Options<GetPlaylistSongsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPlaylistSongsResponse, GetPlaylistSongsError, ThrowOnError>({
        ...options,
        url: '/playlist/{playlist_id}/song'
    });
};

/**
 * Create a song
 * Create a new song for a specific playlist, including a file upload.
 */
export const createSong = <ThrowOnError extends boolean = false>(options: Options<CreateSongData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateSongResponse, CreateSongError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/playlist/{playlist_id}/song'
    });
};

/**
 * Get all songs for a user
 * Retrieve all songs for a user by joining playlists and songs.
 */
export const getAllSongs = <ThrowOnError extends boolean = false>(options: Options<GetAllSongsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllSongsResponse, GetAllSongsError, ThrowOnError>({
        ...options,
        url: '/song'
    });
};

/**
 * Get a song
 * Get a song by ID.
 */
export const getSong = <ThrowOnError extends boolean = false>(options: Options<GetSongData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSongResponse, GetSongError, ThrowOnError>({
        ...options,
        url: '/song/{song_id}'
    });
};

/**
 * Update a song
 * Update the details of a song.
 */
export const updateSong = <ThrowOnError extends boolean = false>(options: Options<UpdateSongData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateSongResponse, UpdateSongError, ThrowOnError>({
        ...options,
        url: '/song/{song_id}'
    });
};

/**
 * Delete a song
 * Delete a song by ID.
 */
export const deleteSong = <ThrowOnError extends boolean = false>(options: Options<DeleteSongData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSongResponse, DeleteSongError, ThrowOnError>({
        ...options,
        url: '/song/{song_id}'
    });
};

/**
 * Download stems
 * Downloads selected stems as a ZIP file.
 */
export const downloadStems = <ThrowOnError extends boolean = false>(options: Options<DownloadStemsData, ThrowOnError>) => {
    return (options?.client ?? client).post<DownloadStemsResponse, DownloadStemsError, ThrowOnError>({
        ...options,
        url: '/song/{song_id}/download_stems'
    });
};

/**
 * Download mixdown
 * Mixes selected stems and downloads zip.
 */
export const downloadMixdown = <ThrowOnError extends boolean = false>(options: Options<DownloadMixdownData, ThrowOnError>) => {
    return (options?.client ?? client).post<DownloadMixdownResponse, DownloadMixdownError, ThrowOnError>({
        ...options,
        url: '/song/{song_id}/download_mixdown'
    });
};