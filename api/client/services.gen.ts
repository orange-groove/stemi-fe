// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from '@hey-api/client-axios'
import type {
  CreatePlaylistData,
  CreatePlaylistError,
  CreatePlaylistResponse,
  GetAllPlaylistsError,
  GetAllPlaylistsResponse,
  GetPlaylistData,
  GetPlaylistError,
  GetPlaylistResponse,
  UpdatePlaylistData,
  UpdatePlaylistError,
  UpdatePlaylistResponse,
  DeletePlaylistData,
  DeletePlaylistError,
  DeletePlaylistResponse,
  GetPlaylistSongsData,
  GetPlaylistSongsError,
  GetPlaylistSongsResponse,
  AddPlaylistSongData,
  AddPlaylistSongError,
  AddPlaylistSongResponse,
  DeletePlaylistSongData,
  DeletePlaylistSongError,
  DeletePlaylistSongResponse,
  CreateSongData,
  CreateSongError,
  CreateSongResponse,
  GetAllSongsError,
  GetAllSongsResponse,
  GetSongData,
  GetSongError,
  GetSongResponse,
  UpdateSongData,
  UpdateSongError,
  UpdateSongResponse,
  DeleteSongData,
  DeleteSongError,
  DeleteSongResponse,
  GetSampleSongError,
  GetSampleSongResponse,
  DownloadStemsData,
  DownloadStemsError,
  DownloadStemsResponse,
  DownloadMixdownData,
  DownloadMixdownError,
  DownloadMixdownResponse,
  ProcessSongData,
  ProcessSongError,
  ProcessSongResponse,
  GetSessionPreviewData,
  GetSessionPreviewError,
  GetSessionPreviewResponse,
  DownloadSessionStemsData,
  DownloadSessionStemsError,
  DownloadSessionStemsResponse,
  DownloadSessionMixdownData,
  DownloadSessionMixdownError,
  DownloadSessionMixdownResponse,
  DeleteSessionData,
  DeleteSessionError,
  DeleteSessionResponse,
  GetSessionStemData,
  GetSessionStemError,
  GetSessionStemResponse,
} from './types.gen'

export const client = createClient(createConfig())

/**
 * Create a playlist
 * Create a new playlist for a specific user using form data.
 */
export const createPlaylist = <ThrowOnError extends boolean = false>(
  options: Options<CreatePlaylistData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePlaylistResponse,
    CreatePlaylistError,
    ThrowOnError
  >({
    ...options,
    url: '/playlist',
  })
}

/**
 * Get all playlists for a user
 * Retrieve all playlists for a specific user.
 */
export const getAllPlaylists = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllPlaylistsResponse,
    GetAllPlaylistsError,
    ThrowOnError
  >({
    ...options,
    url: '/playlist',
  })
}

/**
 * Get a playlist
 * Get a playlist by ID.
 */
export const getPlaylist = <ThrowOnError extends boolean = false>(
  options: Options<GetPlaylistData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPlaylistResponse,
    GetPlaylistError,
    ThrowOnError
  >({
    ...options,
    url: '/playlist/{playlist_id}',
  })
}

/**
 * Update a playlist
 * Update the name of a playlist.
 */
export const updatePlaylist = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePlaylistData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdatePlaylistResponse,
    UpdatePlaylistError,
    ThrowOnError
  >({
    ...options,
    url: '/playlist/{playlist_id}',
  })
}

/**
 * Delete a playlist
 * Delete a playlist by ID.
 */
export const deletePlaylist = <ThrowOnError extends boolean = false>(
  options: Options<DeletePlaylistData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePlaylistResponse,
    DeletePlaylistError,
    ThrowOnError
  >({
    ...options,
    url: '/playlist/{playlist_id}',
  })
}

/**
 * Get a playlist's songs by ID
 * Get a playlist's songs by ID.
 */
export const getPlaylistSongs = <ThrowOnError extends boolean = false>(
  options: Options<GetPlaylistSongsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPlaylistSongsResponse,
    GetPlaylistSongsError,
    ThrowOnError
  >({
    ...options,
    url: '/playlist/{playlist_id}/song',
  })
}

/**
 * Add a song to a playlist
 * Add a song to a playlist.
 */
export const addPlaylistSong = <ThrowOnError extends boolean = false>(
  options: Options<AddPlaylistSongData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AddPlaylistSongResponse,
    AddPlaylistSongError,
    ThrowOnError
  >({
    ...options,
    url: '/playlist/{playlist_id}/song/{song_id}',
  })
}

/**
 * Delete a song from a playlist
 * Delete a song from a playlist
 */
export const deletePlaylistSong = <ThrowOnError extends boolean = false>(
  options: Options<DeletePlaylistSongData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePlaylistSongResponse,
    DeletePlaylistSongError,
    ThrowOnError
  >({
    ...options,
    url: '/playlist/{playlist_id}/song/{song_id}',
  })
}

/**
 * Create a song
 * Create a new song for a specific playlist, including a file upload.
 */
export const createSong = <ThrowOnError extends boolean = false>(
  options?: Options<CreateSongData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateSongResponse,
    CreateSongError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
    url: '/song',
  })
}

/**
 * Get all songs
 * Retrieve all songs for a user.
 */
export const getAllSongs = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllSongsResponse,
    GetAllSongsError,
    ThrowOnError
  >({
    ...options,
    url: '/song',
  })
}

/**
 * Get a song
 * Get a song by ID.
 */
export const getSong = <ThrowOnError extends boolean = false>(
  options: Options<GetSongData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSongResponse,
    GetSongError,
    ThrowOnError
  >({
    ...options,
    url: '/song/{song_id}',
  })
}

/**
 * Update a song
 * Update the details of a song.
 */
export const updateSong = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSongData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateSongResponse,
    UpdateSongError,
    ThrowOnError
  >({
    ...options,
    url: '/song/{song_id}',
  })
}

/**
 * Delete a song
 * Delete a song by ID.
 */
export const deleteSong = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSongData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteSongResponse,
    DeleteSongError,
    ThrowOnError
  >({
    ...options,
    url: '/song/{song_id}',
  })
}

/**
 * Get a sample song
 * Get the sample song.
 */
export const getSampleSong = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSampleSongResponse,
    GetSampleSongError,
    ThrowOnError
  >({
    ...options,
    url: '/song/sample',
  })
}

/**
 * Download stems
 * Downloads selected stems as a ZIP file.
 */
export const downloadStems = <ThrowOnError extends boolean = false>(
  options: Options<DownloadStemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DownloadStemsResponse,
    DownloadStemsError,
    ThrowOnError
  >({
    ...options,
    url: '/song/{song_id}/download_stems',
  })
}

/**
 * Download mixdown
 * Mixes selected stems and downloads zip.
 */
export const downloadMixdown = <ThrowOnError extends boolean = false>(
  options: Options<DownloadMixdownData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DownloadMixdownResponse,
    DownloadMixdownError,
    ThrowOnError
  >({
    ...options,
    url: '/song/{song_id}/download_mixdown',
  })
}

/**
 * Process a song
 * Upload a song file and get a session ID for processing.
 */
export const processSong = <ThrowOnError extends boolean = false>(
  options: Options<ProcessSongData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ProcessSongResponse,
    ProcessSongError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
    url: '/process',
  })
}

/**
 * Get session preview
 * Get preview data for a processing session.
 */
export const getSessionPreview = <ThrowOnError extends boolean = false>(
  options: Options<GetSessionPreviewData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSessionPreviewResponse,
    GetSessionPreviewError,
    ThrowOnError
  >({
    ...options,
    url: '/session/{session_id}/preview',
  })
}

/**
 * Download session stems
 * Download selected stems from a session as a ZIP file.
 */
export const downloadSessionStems = <ThrowOnError extends boolean = false>(
  options: Options<DownloadSessionStemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DownloadSessionStemsResponse,
    DownloadSessionStemsError,
    ThrowOnError
  >({
    ...options,
    url: '/download/stems/{session_id}',
  })
}

/**
 * Download session mixdown
 * Download mixdown from a session (muted tracks omitted).
 */
export const downloadSessionMixdown = <ThrowOnError extends boolean = false>(
  options: Options<DownloadSessionMixdownData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DownloadSessionMixdownResponse,
    DownloadSessionMixdownError,
    ThrowOnError
  >({
    ...options,
    url: '/download/mixdown/{session_id}',
  })
}

/**
 * Get session stem
 * Get a specific stem audio file from a session.
 */
export const getSessionStem = <ThrowOnError extends boolean = false>(
  options: Options<GetSessionStemData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSessionStemResponse,
    GetSessionStemError,
    ThrowOnError
  >({
    ...options,
    url: '/session/{session_id}/stem/{stem_name}',
  })
}

/**
 * Delete session
 * Clean up session storage on the backend.
 */
export const deleteSession = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteSessionResponse,
    DeleteSessionError,
    ThrowOnError
  >({
    ...options,
    url: '/session/{session_id}',
  })
}
